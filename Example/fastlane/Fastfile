# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.45.0"

default_platform :ios

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    # cocoapods

  end

  def prepare
    puts("🌹---#{podfile_modules}--🌹")
    Dir.chdir('../Pods') do
      xcshareddata = 'Pods.xcodeproj/xcshareddata/xcschemes'
      FileUtils.mkpath xcshareddata unless File.exists?(xcshareddata)
      podfile_modules.each do |module_name|
        modulexcscheme = "Pods.xcodeproj/xcuserdata/steve.xcuserdatad/xcschemes/#{module_name}.xcscheme"
        if File.exists?(modulexcscheme) == true
          puts("🌹-🇺🇸---")
          `mv #{modulexcscheme} #{xcshareddata}`
        end
        `curl -fsSL https://github.com/Alamofire/Alamofire/blob/master/Alamofire.podspec?raw=true > #{module_name}.podspec`
      end
       `carthage build --platform iOS --no-skip-current`
    end
    `rm -rf ../build`
    spec_modify
  end

  def podfile_modules
    module_list = []
    Dir.chdir('../') do
      File.open('Podfile', 'r') do |file|
        file.each_line do |line|
          if line.include?(':path') == false && line.include?('pod') == true
            pod_module = line.split(/'/)[1]
            module_list.insert(-1, pod_module)
          end
        end
      end
      return module_list
    end
  end

  def podfile_modify(module_list)
    Dir.chdir('../') do
      if File.readlines('Podfile').grep(/#modified/).empty? == true
        temp_file = Tempfile.new('.Podfile.temp')
          begin
            File.open('Podfile', 'r') do |file|
              temp_file.puts('#modified')
              file.each_line do |line|
                temp_line = ''
                if line.include?(':path') == false && line.include?('pod') == true
                  pod_module = line.split(/'/)[1]
                  if module_list.include?(pod_module)
                    # .chomp 去除行尾换行符
                      temp_line = " #{line.chomp},:path => 'Pods/#{pod_module}.podspec'"
                  else
                    temp_line = line
                  end
                  puts("🌹--#{pod_module}--🌹")
                else
                    temp_line = line
                end
                temp_file.puts temp_line
              end
            end
            temp_file.close
            FileUtils.mv(temp_file.path, 'Podfile')
          ensure
            temp_file.close
            temp_file.unlink
          end
      end
    end
  end

   # "Spec modify"
  def spec_modify
    Dir.chdir('../Pods') do
      podfile_modules.each do |module_name|
        if File.readlines("#{module_name}.podspec").grep(/#modified/).empty? == true
          puts("🌹🇺🇸🌹")
          temp_file = Tempfile.new('.Spec.temp')
            begin
              File.open("#{module_name}.podspec", 'r') do |file|
                temp_file.puts('#modified')
                file.each_line do |line|
                  temp_line = ''
                  if line.include?('s.source_files')
                    # .chomp
                      temp_line = "if ENV['source'] == true || ENV['#{module_name}'] == true\n s.source_files = '#{module_name}/Source/*.swift'\n else\n s.vendored_frameworks = \"Carthage/Build/iOS/#{module_name}.framework\"\nend"
                  else
                    if line.include?('s.name')
                      temp_line = "s.name = '#{module_name}'"
                    else
                      temp_line = line
                    end
                  end
                  temp_file.puts temp_line
                end
              end
              temp_file.close
              FileUtils.mv(temp_file.path, "#{module_name}.podspec")
            ensure
              temp_file.close
              temp_file.unlink
            end
        end
      end
    end
  end

  desc "Start pod install"
  lane :pod_install do |options|
    module_list = []
    if options[:lib] != nil
      # strip 去除空格
      module_list = options[:lib].delete(' ').strip.split(",")
    else
      module_list = podfile_modules
    end
    puts("🌹-----🌹---#{module_list}----🌹")
    podfile_modify(module_list)
    `pod install --verbose`
  end

  desc "Start pod install with lib"
  lane :lib_install do
    podfile_modify
    `pod install --verbose`
  end

  desc "not easy to hold the result"
  lane :input_test do |options|
    puts("🌹---#{options[:key]}---🌹")
    puts("🌹---#{options[:keys]}---🌹")
    # usage
    # fastlane input_test "key: 1, 2, 3, 4" "keys: 789"
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    gym # Build your app - more options available
    pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym # Build your app - more options available
    deliver(force: true)
    # frameit
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded.
# Learn more at https://github.com/fastlane/fastlane#metrics
